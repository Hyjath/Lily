'OBSERVERA ATT KODEN I DENNA KLASS ÄR EN DEL AV GRUNDDATABASEN OCH FÅR INTE ÄNDRAS.
'ÄNDRINGAR OCH TILLÄGG I FUNKTIONALITET GÖRS I SEPARATA KLASSER OCH MODULER
'OM DU VÄLJER ATT LÅSA UPP PROJEKTET FÖR REDIGERING ÄR DET VIKTIGT ATT DETTA BEAKTAS.
'LÖSENORD lean
Option Explicit

Public Function GetColorHex(ByVal table As String, ByVal Field As String, ByVal selectedOption As Long, ByVal def As String)
    On Error GoTo ErrorHandler
    
    Dim oRecord As New LDE.Record
    Dim oOption As LDE.Option
    Dim c As Long
    
    oRecord.Open Classes(table)
    
    For Each oOption In oRecord.Options(Field)
        If oOption.Value = selectedOption Then
            c = oOption.Attribute("color")
        End If
    Next oOption
    
    Dim hexStringBGR As String
    Dim hexStringRGB As String
     If c = 0 Then
        'ingen färg var angiven
        hexStringRGB = def
     Else
        'Limes databas lagrar färg i BGR (Long)
        'konvertera först till hexa
        hexStringBGR = VBA.Hex(c)
        'konvertera från BGR till RGB
        hexStringBGR = VBA.Right("0000" & hexStringBGR, 6)
        hexStringRGB = VBA.Right(hexStringBGR, 2) & VBA.Mid(hexStringBGR, 3, 2) & VBA.Left(hexStringBGR, 2)
     End If
     
    GetColorHex = hexStringRGB
    
    Exit Function
ErrorHandler:
    Call UI.ShowError("Globals.GetColorHex")
End Function

Public Function VerifyInspector(ByVal strClassName As String, ByRef oInspector As Lime.Inspector, Optional ByVal bVerbose As Boolean = True) As Boolean
    On Error GoTo ErrorHandler
    Dim bReturn As Boolean
    
    bReturn = True
    
    'Försök att sätta den till ActiveInspector om den inte angivits
    If VBA.IsMissing(oInspector) Then
        oInspector = Application.ActiveInspector
    End If
    
    If oInspector Is Nothing Then
        bReturn = False
    ElseIf oInspector.Class.Name <> strClassName Then
        bReturn = False
    End If
    
    If bReturn = False And bVerbose = True Then
        Call Lime.MessageBox(Localize.GetText("Globals", "e_commandonlyaccessableon"), VBA.vbExclamation, Database.Classes(strClassName).LocalName)
    End If
    
    VerifyInspector = bReturn
    Exit Function
ErrorHandler:
    Call UI.ShowError("Globals.VerifyInspector")
End Function

Public Function GetLimeLinkBase(ByVal strClass As String) As String
    On Error GoTo ErrorHandler
        
    GetLimeLinkBase = strClass + "." + VBA.Replace(Application.Database.Name, " ", "%20") + "." + Application.Database.RemoteServerName + "?"
    
    Exit Function
ErrorHandler:
    Call UI.ShowError("Globals.GetLimeLinkBase")
End Function

'The function only includes the relations if they the only relation to a class
'i.e. If there are two connections to coworkers NONE will be included
Public Function GetSingleRelations(ByVal oObject As Object) As Scripting.Dictionary
    On Error GoTo ErrorHandler
    Dim dicRelation As New Scripting.Dictionary
    Dim dicRelationsToInclude As New Scripting.Dictionary
    Dim sKey As Variant
    
    If TypeOf oObject Is Controls Or TypeOf oObject Is Inspector Then
        Dim oControls As Lime.Controls
        Dim oControl As Lime.Control
        
        If TypeOf oObject Is Controls Then
            Set oControls = oObject
        Else
            Set oControls = oObject.Controls
        End If
        
        'Loop the field to find all relationfields and count the number of relations to each class
        For Each oControl In oControls
            If oControl.Field.Type = lkFieldTypeLink Then
                If dicRelationsToInclude.Exists(oControl.Field.LinkedField.Class.Name) = False Then
                    Call dicRelationsToInclude.Add(oControl.Field.LinkedField.Class.Name, 1)
                Else
                    dicRelationsToInclude.Item(oControl.Field.LinkedField.Class.Name) = dicRelationsToInclude.Item(oControl.Field.LinkedField.Class.Name) + 1
                End If
            End If
        Next oControl
        
        
        'Remove all Classes to should not be linked
        For Each sKey In dicRelationsToInclude.Keys()
            If VBA.CInt(dicRelationsToInclude(sKey)) > 1 Then
                dicRelationsToInclude.Remove (sKey)
            End If
        Next sKey
        
                
        For Each oControl In oControls
            If oControl.Field.Type = lkFieldTypeLink Then
                'Relation to include and has a Non-Null value
                If dicRelationsToInclude.Exists(oControl.Field.LinkedField.Class.Name) And oControls.GetValue(oControl.Name, 0) > 0 Then
                    Call dicRelation.Add(oControl.Field.LinkedField.Class.Name, oControl.Value)
                End If
            End If
        Next oControl
        
    ElseIf TypeOf oObject Is Record Then
        Dim oRecord As LDE.Record
        Dim oField As LDE.Field
        
        Set oRecord = oObject
        
        
        'Loop the field to find all relationfields and count the number of relations to each class
        For Each oField In oRecord.Fields
            If oField.Type = lkFieldTypeLink Then
                If dicRelationsToInclude.Exists(oField.LinkedField.Class.Name) = False Then
                    Call dicRelationsToInclude.Add(oField.LinkedField.Class.Name, 1)
                Else
                    dicRelationsToInclude.Item(oField.LinkedField.Class.Name) = dicRelationsToInclude.Item(oField.LinkedField.Class.Name) + 1
                End If
            End If
        Next oField
        
        'Remove all Classes to should not be linked
        For Each sKey In dicRelationsToInclude.Keys()
            If VBA.CInt(dicRelationsToInclude(sKey)) > 1 Then
                dicRelationsToInclude.Remove (sKey)
            End If
        Next sKey
        
        
        For Each oField In oRecord
            If oField.Type = lkFieldTypeLink Then
                'Relation to include and has a Non-Null value
                If dicRelationsToInclude.Exists(oControl.Field.LinkedField.Class.Name) And VBA.IsNull(oField.Value) = False Then
                    Call dicRelation.Add(oControl.Field.LinkedField.Class.Name, oField.Value)
                End If
            End If
        Next oField
    Else
        Call Err.Raise(100, "Globals.GetSingleRelations", Localize.GetText("Globals", "e_functiononlyavailableonobjects"))
    End If
    
    Set GetSingleRelations = dicRelation

    
    Exit Function
ErrorHandler:
    Call UI.ShowError("Globals.GetSingleRelations")
End Function

Public Function GetCreatedFromInspector(ByRef oControls As Lime.Controls) As Lime.Inspector
    On Error GoTo ErrorHandler
    
    Set GetCreatedFromInspector = Nothing
    
    If Not oControls Is Nothing Then
        If Not oControls.ParentInspector Is Nothing Then
            If oControls.ParentInspector.Class.Name = oControls.Class.Name Then
                If Not oControls.ParentInspector.ParentInspector Is Nothing Then
                    If oControls.ParentInspector.ParentInspector.Class.Name <> oControls.Class.Name Then
                        Set GetCreatedFromInspector = oControls.ParentInspector.ParentInspector
                    End If
                End If
            Else
                Set GetCreatedFromInspector = oControls.ParentInspector
            End If
        End If
    End If
    
    Exit Function
ErrorHandler:
    Call UI.ShowError("Globals.GetCreatedFromInspector")
End Function

Public Function CheckLimeVersion(ByVal intRequiredMajor As Integer, ByVal intRequiredMinor As Integer, ByVal intRequiredRevision As Integer, Optional ByVal bVerbose As Boolean = True) As Boolean
    On Error GoTo ErrorHandler
    Dim intCurrentMajor As Integer
    Dim intCurrentMinor As Integer
    Dim intCurrentRevision As Integer
    Dim bOK As Boolean
    
    bOK = False
    
    Call GetLimeVersion(intCurrentMajor, intCurrentMinor, intCurrentRevision)
    
    If intCurrentMajor > intRequiredMajor _
        Or (intCurrentMajor = intRequiredMajor And intCurrentMinor > intRequiredMinor) _
        Or (intCurrentMajor = intRequiredMajor And intCurrentMinor = intRequiredMinor And intCurrentRevision >= intRequiredRevision) Then
            bOK = True
    End If
    
    If bOK = False And bVerbose = True Then
        Call Lime.MessageBox(Localize.GetText("Globals", "e_limeversiontoold"), VBA.vbExclamation Or VBA.vbOKOnly, Lime.Version, VBA.CStr(intRequiredMajor), VBA.CStr(intRequiredMinor), VBA.CStr(intRequiredRevision))
    End If
    
    CheckLimeVersion = bOK
    
    Exit Function
ErrorHandler:
    Call UI.ShowError("Globals.CheckLimeVersion")
End Function

Private Sub GetLimeVersion(ByRef intMajor As Integer, ByRef intMinor As Integer, ByRef intRevision As Integer)
    On Error GoTo ErrorHandler
    Dim arrVersion As Variant
    
    arrVersion = VBA.Split(Lime.Version, ".", , vbTextCompare)
    
    intMajor = arrVersion(0)
    intMinor = arrVersion(1)
    intRevision = arrVersion(2)

    Exit Sub
ErrorHandler:
    Call UI.ShowError("Globals.GetLimeVersion")
End Sub

Public Sub AutoRelateAll(ByRef oControls As Lime.Controls)
    On Error GoTo ErrorHandler
    Dim oFromInspector As Lime.Inspector
    Dim dicRelations As Scripting.Dictionary
    Dim oControl As Lime.Control
    Dim oField As LDE.Field
    Dim dicClassesToLink As New Scripting.Dictionary
    Dim sKey As Variant
    
    Set oFromInspector = Globals.GetCreatedFromInspector(oControls)
    
    If Not oFromInspector Is Nothing Then
        Set dicRelations = Globals.GetSingleRelations(oFromInspector)
        
        If Not dicRelations Is Nothing Then
            'Loop the field to find all relationfields and count the number of relations to each class
            For Each oControl In oControls
                If oControl.Field.Type = lkFieldTypeLink Then
                    If dicClassesToLink.Exists(oControl.Field.LinkedField.Class.Name) = False Then
                        Call dicClassesToLink.Add(oControl.Field.LinkedField.Class.Name, 1)
                    Else
                        dicClassesToLink.Item(oControl.Field.LinkedField.Class.Name) = dicClassesToLink.Item(oControl.Field.LinkedField.Class.Name) + 1
                    End If
                End If
            Next oControl
            
            'Remove all Classes to should not be linked
            For Each sKey In dicClassesToLink.Keys()
                If VBA.CInt(dicClassesToLink(sKey)) > 1 Then
                    dicClassesToLink.Remove (sKey)
                End If
            Next sKey
        
            'Loop Controls and set Values
            For Each oControl In oControls
                If oControl.Field.Type = lkFieldTypeLink Then
                    If dicClassesToLink.Exists(oControl.Field.LinkedField.Class.Name) Then
                        If dicRelations.Exists(oControl.Field.LinkedField.Class.Name) And oControls.GetValue(oControl.Name, 0) = 0 Then
                            oControl.Value = VBA.CLng(dicRelations(oControl.Field.LinkedField.Class.Name))
                        End If
                    End If
                End If
            Next oControl
        End If
        
    End If
    
    Exit Sub
ErrorHandler:
    Call UI.ShowError("GeneralControlsHandler.AutoRelateAll")
End Sub
