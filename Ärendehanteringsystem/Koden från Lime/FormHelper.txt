Option Explicit

Public Sub FillComboBoxWithOptions(ByRef Combo As MSForms.ComboBox, ByRef oOptions As LDE.Options, Optional ByVal sDefaultKey As String = "§§", Optional ByRef dicExcludeList As Scripting.Dictionary)
    On Error GoTo ErrorHandler
    
    Dim oOption As LDE.Option
    Dim bAdd As Boolean
    Dim i As Integer
    Combo.Clear
    
    
    With Combo
        For Each oOption In oOptions
            bAdd = True
            If Not dicExcludeList Is Nothing Then
                If dicExcludeList.Exists(oOption.key) Then
                    bAdd = False
                End If
            End If
            
            If bAdd Then
                .AddItem oOption.Text
                .List(.ListCount - 1, 1) = oOption.Value
                
                'Om det skickats med ett standardvärde
                If VBA.StrComp(sDefaultKey, "§§", VBA.vbTextCompare) <> 0 And oOption.key = sDefaultKey Then
                    .ListIndex = .ListCount - 1
                    .Tag = .ListIndex
                End If
            End If
        Next oOption
    End With
    
    Exit Sub
ErrorHandler:
    Call UI.ShowError("FormHelper.FillComboBoxWithOptions")
End Sub

Public Sub FillComboBoxWithRecords(ByRef Combo As MSForms.ComboBox, ByVal sClass As String, Optional ByRef oFilter As LDE.filter = Nothing, Optional ByVal sDefaultKey As Long = 0, Optional ByVal bAddEmptyValue As Boolean = False)
    On Error GoTo ErrorHandler
    
    Dim oRecords As New LDE.Records
    Dim oRecord As LDE.Record
    Dim oView As New LDE.view
    Combo.Clear
        
    oView.Add "id" + sClass
    oView.Add "descriptive", lkSortAscending
    
    oRecords.Open Database.Classes(sClass), oFilter, oView
    
    With Combo
        If bAddEmptyValue Then
            .AddItem ""
        End If
    
        For Each oRecord In oRecords
            .AddItem oRecord.Description
            .List(.ListCount - 1, 1) = oRecord.ID
            
            'Om det skickats med ett standardvärde
            If sDefaultKey > 0 And oRecord.ID = sDefaultKey Then
                .ListIndex = .ListCount - 1
            End If
        Next oRecord
    End With
    
    Exit Sub
ErrorHandler:
    Call UI.ShowError("FormHelper.FillComboBoxWithRecords")
End Sub

Public Sub SelectComboBoxItem(ByRef Combo As MSForms.ComboBox, ByVal lID As Long)
    On Error GoTo ErrorHandler
    
    Dim i As Integer
    
    With Combo
        For i = 0 To .ListCount - 1
            If VBA.CLng(.List(i, 1)) = lID Then
                .ListIndex = i
                Exit For
            End If
        Next i
    End With
    
    Exit Sub
ErrorHandler:
    Call UI.ShowError("FormHelper.SelectComboBoxItem")
End Sub

Public Function ValidateNumericArgument(ByVal inString As String, ByVal strFieldName As String, Optional ByRef arrReturnValues As Variant, Optional ByRef strError As String) As Boolean
    On Error GoTo ErrorValidateNumericArgument
    Dim bolValid As Boolean
    Dim arrValues As Variant
    Dim colValues As New Collection
    Dim i As Integer
    
    bolValid = False

    If VBA.Len(VBA.Trim(inString)) > 0 Then
        arrValues = VBA.Split(inString, CustomSettings.FORMS_AND_DELIMITER, -1, vbTextCompare)
        
        'Loop through all conditions
        For i = 0 To UBound(arrValues)
            If VBA.IsNumeric(VBA.Trim(arrValues(i))) Then
                Dim inst As New SearchArguments
                inst.strValue = arrValues(i)
                
                Call colValues.Add(inst, CStr(colValues.Count))
                Set inst = Nothing
                bolValid = True
            Else
                Call AddToString(strError, Lime.FormatString(Localize.GetText("FormHelper", "e_invalidvalue"), strFieldName, arrValues(i)))
                bolValid = False
            End If
            
            If bolValid = False Then
                Exit For
            End If
        Next
    Else
        Call AddToString(strError, Lime.FormatString(Localize.GetText("FormHelper", "e_invalidvalue"), strFieldName, ""))
        bolValid = False
    End If
    
    'Create the Return array
    If colValues.Count > 0 And bolValid Then
        ReDim arrReturnValues(colValues.Count - 1)
        
        For i = 1 To colValues.Count
            arrReturnValues(i - 1) = colValues.Item(i).strValue
        Next
    Else
        arrReturnValues = Array()
    End If
    

    GoTo ReturnValue

    Exit Function
ErrorValidateNumericArgument:
    UI.ShowError "FormHelper.ValidateNumericArgument()"

    bolValid = False
ReturnValue:
    ValidateNumericArgument = bolValid
End Function

Public Function ValidateArgumentLength(ByVal inString As String, ByVal intLength As Integer, ByVal strFieldName As String, Optional ByRef arrReturnValues As Variant, Optional ByRef strError As String) As Boolean
    On Error GoTo ErrorValidateArgumentLength
    Dim bolValid As Boolean
    Dim arrValues As Variant
    Dim colValues As New Collection
    Dim i As Integer
    
    bolValid = False

    If VBA.Len(VBA.Trim(inString)) > 0 Then
        arrValues = VBA.Split(inString, CustomSettings.FORMS_AND_DELIMITER, -1, vbTextCompare)
        
        'Loop through all conditions
        For i = 0 To UBound(arrValues)
            If VBA.Len(VBA.Trim(arrValues(i))) = intLength Then
                Dim inst As New SearchArguments
                inst.strValue = arrValues(i)
                
                Call colValues.Add(inst, CStr(colValues.Count))
                Set inst = Nothing
                bolValid = True
            Else
                Call AddToString(strError, Lime.FormatString(Localize.GetText("FormHelper", "e_invalidvalue"), strFieldName, arrValues(i)))
                bolValid = False
            End If
            
            If bolValid = False Then
                Exit For
            End If
        Next
    Else
        bolValid = True
    End If
    
    'Create the Return array
    If colValues.Count > 0 And bolValid Then
        ReDim arrReturnValues(colValues.Count - 1)
        
        For i = 1 To colValues.Count
            arrReturnValues(i - 1) = colValues.Item(i).strValue
        Next
    Else
        arrReturnValues = Array()
    End If
    

    GoTo ReturnValue

    Exit Function
ErrorValidateArgumentLength:
    UI.ShowError "SearchFormHelper.ValidateArgumentLength()"

    bolValid = False
ReturnValue:
    ValidateArgumentLength = bolValid
End Function

Private Sub AddToString(ByRef strFull As String, ByVal strToAdd As String)
    On Error Resume Next
    
    strFull = strFull + strToAdd + vbCrLf
End Sub

Public Function GetOptionFromText(ByVal strClass As String, ByVal strField As String, ByVal strText As String) As LDE.Option
    On Error GoTo ErrorHandler
    
    Set GetOptionFromText = Database.Classes(strClass).Fields(strField).Options(lkFieldOptionsAll).Lookup(strText, lkLookupOptionByText)
    
    Exit Function
ErrorHandler:
    Call UI.ShowError("FormHelper.GetOptionFromText")

    Set GetOptionFromText = Nothing
End Function

Public Sub SetFormDefaultColors(ByRef oForm As MSForms.UserForm)
    On Error GoTo ErrorHandler
    
    Dim oControl As MSForms.Control
    
    For Each oControl In oForm.Controls
        Select Case TypeName(oControl)
            Case "MultiPage":
                oControl.BackColor = CustomSettings.FORMS_BACKGROUND_COLOR
                
            Case "Frame", "Label", "RadioButton":
                oControl.BackColor = CustomSettings.FORMS_BACKGROUND_COLOR
                oControl.BorderColor = CustomSettings.FORMS_BORDER_COLOR
                oControl.ForeColor = CustomSettings.FORMS_FORE_COLOR
                
            Case "TextBox", "ComboBox":
                oControl.BorderColor = CustomSettings.FORMS_BORDER_COLOR
                
            Case "CheckBox", "OptionButton":
                oControl.ForeColor = CustomSettings.FORMS_FORE_COLOR

        End Select
    Next oControl
    
    oForm.BackColor = CustomSettings.FORMS_BACKGROUND_COLOR
    
    Exit Sub
ErrorHandler:
    Call UI.ShowError("FormHelper.SetFormDefaultColors")
End Sub

Public Sub ValidateNumericTextboxInput(tb As TextBox, ByVal KeyAscii As MSForms.ReturnInteger, allowPlus As Boolean, allowDecimal As Boolean)
    On Error Resume Next
    If Not ((KeyAscii >= 48 And KeyAscii <= 57) Or (allowPlus And KeyAscii = 43) Or ((allowDecimal And (KeyAscii = 44 Or KeyAscii = 46)))) Then
        KeyAscii = 0
    End If
End Sub
